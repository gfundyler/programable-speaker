
// 100 HZ INT in
// Data R Out
// Data L Out
// CLK    Out

typedef struct {
  uint16_t left, right;
  uint8_t dac[16];
} ProfileRow;

ProfileRow profile[] = {
  {21362, 49152, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21375, 49165, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21388, 16410, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21402, 16423, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21415, 16437, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21428, 16450, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21441, 16463, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21455, 16476, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21468, 16490, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21481, 16503, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21495, 16516, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21508, 16530, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21521, 16543, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21534, 16556, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21548, 16569, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21561, 16583, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21574, 16596, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21588, 16609, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21601, 16622, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21614, 16636, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21627, 16649, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21641, 16662, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21654, 16676, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21667, 16689, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21680, 16702, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21694, 16715, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21707, 16729, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21720, 16742, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21734, 16755, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21747, 16768, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21760, 16782, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21773, 16795, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21787, 16808, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21800, 16822, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21813, 16835, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21826, 16848, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21840, 16861, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21853, 16875, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21866, 16888, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21880, 16901, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21893, 16915, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21906, 16928, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21919, 16941, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21933, 16954, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21946, 16968, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21959, 16981, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21973, 16994, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21986, 17007, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21999, 17021, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22012, 17034, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22026, 17047, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22039, 17061, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22052, 17074, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22065, 17087, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22079, 17100, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22092, 17114, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22105, 17127, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22119, 17140, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22132, 17153, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22145, 17167, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22158, 17180, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22172, 17193, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22185, 17207, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22198, 17220, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22211, 17233, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22225, 17246, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22238, 17260, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22251, 17273, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22265, 17286, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22278, 17300, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22291, 17313, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22304, 17326, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22318, 17339, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22331, 17353, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {22344, 17366, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {49152, 17379, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {49165, 17392, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16410, 17406, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16423, 17419, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16437, 17432, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16450, 17446, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16463, 17459, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16476, 17472, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16490, 17485, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16503, 17499, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16516, 17512, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16530, 17525, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16543, 17538, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16556, 17552, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16569, 17565, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16583, 17578, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16596, 17592, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16609, 17605, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16622, 17618, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16636, 17631, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16649, 17645, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16662, 17658, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16676, 17671, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16689, 17685, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16702, 17698, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16715, 17711, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16729, 17724, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16742, 17738, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16755, 17751, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16768, 17764, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16782, 17777, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16795, 17791, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16808, 17804, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16822, 17817, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16835, 17831, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16848, 17844, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16861, 17857, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16875, 17870, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16888, 17884, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16901, 17897, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16915, 17910, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16928, 17923, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16941, 17937, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16954, 17950, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16968, 17963, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16981, 17977, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {16994, 17990, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17007, 18003, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17021, 18016, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17034, 18096, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17047, 18176, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17061, 18255, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17074, 18335, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17087, 18415, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17100, 18494, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17114, 18574, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17127, 18654, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17140, 18733, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17153, 18813, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17167, 18893, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17180, 18972, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17193, 19052, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17207, 19132, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17220, 19211, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17233, 19291, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17246, 19371, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17260, 19450, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17273, 19530, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17286, 19609, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17300, 19689, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17313, 19769, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17326, 19848, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17339, 19928, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17353, 20008, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17366, 20087, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17446, 20167, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17525, 20247, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17605, 20326, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17685, 20406, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17764, 20486, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17844, 20565, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {17923, 20645, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18003, 20725, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18083, 20804, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18162, 20884, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18242, 20964, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18322, 21043, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18401, 21123, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18481, 21203, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18561, 21282, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18640, 21362, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18720, 21441, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18800, 21521, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18879, 21601, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {18959, 21680, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19039, 21760, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19118, 21840, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19198, 21919, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19278, 21999, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19357, 22012, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19437, 22026, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19517, 22039, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19596, 22052, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19676, 22065, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19755, 22079, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19835, 22092, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19915, 22105, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {19994, 22119, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20074, 22132, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20154, 22145, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20233, 22158, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20313, 22172, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20393, 22185, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20472, 22198, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20552, 22211, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20632, 22225, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20711, 22238, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20791, 22251, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20871, 22265, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {20950, 22278, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21030, 22291, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21110, 22304, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21189, 22318, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21269, 22331, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
  {21349, 22344, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175},
};


void setup() {
  
  Serial.begin(9600); 
  
  // put your setup code here, to run once:
  pinMode(18, INPUT);  // 100 hz interrupt          
  pinMode(20, OUTPUT); // motor serial data R
  pinMode(21, OUTPUT); // motor serial data L
  pinMode(19, OUTPUT); // Motor serial clock

  pinMode(A8, OUTPUT); // Display Bit 0
  pinMode(A9, OUTPUT); // Display Bit 1
  pinMode(A10, OUTPUT); // Display Bit 2
  pinMode(A11, OUTPUT); // Display Bit 3
  pinMode(A12, OUTPUT); // Display Bit 4
  pinMode(A13, OUTPUT); // Display Bit 5
  pinMode(A14, OUTPUT); // Display Bit 6
  pinMode(A15, OUTPUT); // Display Bit 7

  pinMode(A0, INPUT); // Rotor Speed Pedal
  pinMode(A1, INPUT); // Effects Intensity Pedal
  pinMode(A2, INPUT); // Volume Pedal

  pinMode(25, INPUT);  // PATCH Up
  pinMode(26, INPUT);  // PATCH Down

  pinMode(27, OUTPUT); // DAC CS
  pinMode(38, OUTPUT); // DAC CLK
  pinMode(28, OUTPUT); // DAC LDAC

  digitalWrite(27, 1); //DAC CS
  digitalWrite(28, 1); //DAC LDAC
  digitalWrite(38, 0); // DAC CLK

  pinMode(49, OUTPUT); // DAC 2  Data
  pinMode(48, OUTPUT); // DAC 1  Data
  pinMode(47, OUTPUT); // DAC 4  Data
  pinMode(46, OUTPUT); // DAC 3  Data
  pinMode(45, OUTPUT); // DAC 6  Data
  pinMode(44, OUTPUT); // DAC 5  Data
  pinMode(43, OUTPUT); // DAC 8  Data
  pinMode(42, OUTPUT); // DAC 7  Data
  pinMode(37, OUTPUT); // DAC 14 Data
  pinMode(36, OUTPUT); // DAC 13 Data
  pinMode(35, OUTPUT); // DAC 16 Data
  pinMode(34, OUTPUT); // DAC 15 Data
  pinMode(33, OUTPUT); // DAC 10 Data
  pinMode(32, OUTPUT); // DAC 11 Data
  pinMode(31, OUTPUT); // DAC 9  Data
  pinMode(30, OUTPUT); // DAC 12 Data

}

//void multiShiftOut(int pins,int values){
  //
//}

void send_row(uint16_t *row);

// L, R, DAC 1-16
/*uint16_t row[18] = { // data to send out
    //0xCD3F, 0x222F,
    1, 4000,
    0x7800, 0x2B17, 0x200C, 0xFBFA,
    0x2743, 0xA795, 0x46AE, 0x9DF2,
    0xE4E9, 0x57B1, 0x9145, 0xD64D,
    0xD784, 0xAA0D, 0x1B70, 0x967D,
};*/

uint16_t DAC[16] = {
  0,0,0,0,
  0,0,0,0,
  0,0,0,0,
  0,0,0,0,
};

uint16_t formatPacket(byte start){
  // start as 8
  // shift left 4 places
  // add single one 1
  // and with 01110000
  uint16_t result = (uint16_t)start;
  result = result << 4;
  //111000000000000;
  result = 0X7000 | result;
  return  result;
}

//Lookup table 
// 16 positions
// 13 bytes
// 

// 0-255
int getSpeedPedal(){
  //TODO: swap with fast read
  return (byte)(analogRead(A0) << 2);
}

// 0-255
int getIntensity(){
  //TODO: swap with fast read
  return (byte)(analogRead(A1) << 2);
}

// 0-255
int getVolumePedal(){
  //TODO: swap with fast read
  return (byte)(analogRead(A2) << 2);
}


byte ModulateEFF(int volume,int  intensity){
  int result = (volume * intensity);
  result = result >> 8;
  return (byte) result;  
}
byte ModulateCenter(int volume,int intensity){
  int result = (volume * (255 - intensity));
  result = result >> 8;
  return (byte) result;
}

void assignDAC(){
  // Get pedal positions
  byte pedalSpeed = getSpeedPedal();
  byte volume = getVolumePedal();
  byte intensity = getIntensity();

  // perform modulations 
  // modulatedC
  DAC[0] = formatPacket(ModulateCenter(volume, intensity));
  //modulatedEFF 
  DAC[1]= formatPacket(ModulateEFF(volume, intensity));
  
  int i = 2;
  for(i= 2; i< 16; i+=1){
  // 14 unknown bytes from lookup table
    DAC[i] = formatPacket(i);
  };
  for(i=2; i < 18; i+=1){
    // Copy Function instead
    //row[i] = DAC[i-2];      // GYF20190308 taken out temporarily
  }
  
}


#define MOTOR_CLOCK_PIN 2   // PORTD
#define DAC_CLOCK_PIN 7     // PORTD

#define CLOCK_BITS ((1 << MOTOR_CLOCK_PIN) | (1 << DAC_CLOCK_PIN))

uint16_t row = 0;
#define ROWS (sizeof(profile) / sizeof(ProfileRow))

uint16_t row_u16[18];

void populate_row_u16(ProfileRow *data) {
  int i;
  row_u16[0] = data->left;
  row_u16[1] = data->right;
  for(i = 0; i < 16; i++) {
    row_u16[i+2] = data->dac[i];
  }
}

void loop_real() {
    digitalWrite(27,0);
    populate_row_u16(&profile[row]);
    send_row(row_u16);
    int i;
    for(i = 0; i <10; i++){
      __asm__ volatile("nop\n\t");//1/16 us
    }
    PORTD &= ~CLOCK_BITS;                   // clock goes low
    digitalWrite(27,1);
    digitalWrite(28,0);
    digitalWrite(28,1);

    //row[1]++;
    //delay(10);
    
    row++;
    if(row >= ROWS) {
      row = 0;
    }
    
    delay(100);
}

void loop_test(){
  Serial.println("Speed");
  Serial.println(getSpeedPedal());
  Serial.println("Intensity");
  Serial.println(getIntensity());
  Serial.println("Volume");
  Serial.println(getVolumePedal());
  delay(5000);
}
void loop_clock_test(){
 digitalWrite(38,1);
 delay(100);
 digitalWrite(38,0);
 delay(100);
}
void loop(){
// loop_clock_test();
 loop_real();
}



//rol rotate to right by source bits
//lsl logical shift left

#define start(out, in)  asm volatile("lsl %0" : "=r" (in)  : "0" (in)); \
                        asm volatile("rol %0" : "=r" (out));

#define build(out, in)  asm volatile("lsl %0" : "=r" (in)  : "0" (in)); \
                        asm volatile("rol %0" : "=r" (out) : "0" (out));

static inline __attribute__((always_inline)) void send_row_bytes(uint8_t *byte) {
    register uint8_t array[18], pl, pd, pc;
    int i;
    
    pd = PORTD | CLOCK_BITS;
    
    array[ 0] = byte[ 0];
    array[ 1] = byte[ 2];
    array[ 2] = byte[ 4];
    array[ 3] = byte[ 6];
    array[ 4] = byte[ 8];
    array[ 5] = byte[10];
    array[ 6] = byte[12];
    array[ 7] = byte[14];
    array[ 8] = byte[16];
    array[ 9] = byte[18];
    array[10] = byte[20];
    array[11] = byte[22];
    array[12] = byte[24];
    array[13] = byte[26];
    array[14] = byte[28];
    array[15] = byte[30];
    array[16] = byte[32];
    array[17] = byte[34];
    
    for(i = 8; i > 0; i--) {
        start(pl, array[ 8]);
        build(pl, array[ 9]);
        build(pl, array[ 6]);
        build(pl, array[ 7]);
        build(pl, array[ 4]);
        build(pl, array[ 5]);
        build(pl, array[ 2]);
        build(pl, array[ 3]);
        
        PORTD = pd ^ CLOCK_BITS;
        pd &= ~CLOCK_BITS;
        pd >>= 2; // lose the two bits
        build(pd, array[ 1]); // replace them
        build(pd, array[ 0]);
        
        start(pc, array[13]);
        build(pc, array[10]);
        build(pc, array[12]);
        build(pc, array[11]);
        build(pc, array[16]);
        build(pc, array[17]);
        build(pc, array[14]);
        build(pc, array[15]);
        
        PORTL = pl;
        PORTD = pd;                         // clock goes high
        PORTC = pc;
    }

    for(i = 0; i <8; i++){
      __asm__ volatile("nop\n\t");//1/16 us
    }

    PORTD |= CLOCK_BITS;

}

void send_row(uint16_t *row) {
    send_row_bytes((uint8_t*)row + 1);      // send all MSB's
    send_row_bytes((uint8_t*)row);          // send all LSB's
}

/* 132 to first bit out clock high
    25 to clock low, 25 to clock high    x7
    80 to clock low, 25 to clock high
    25 to clock low, 25 to clock high    x7
    36 to clock low

    3.125 us/bit max (320 kHz)
    ~60 us total
*/

/*typedef union {
  struct {
    uint16_t position :13;
    uint16_t reserved :2;
    uint16_t strobe   :1;
  };
  uint16_t word;
} Position;*/

/*ProfileRow profile[] = {
  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, },
  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, },
};*/
